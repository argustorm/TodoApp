{"version":3,"sources":["hooks/useForm.js","components/ReducerComponent.js","components/TodoApp.js","index.js"],"names":["useForm","initialState","useState","state","setState","handleInputChange","e","target","name","value","handleReset","ReducerComponent","action","type","payload","filter","todo","id","map","done","init","JSON","parse","localStorage","getItem","TodoApp","useReducer","todos","dispatch","useEffect","setItem","stringify","handleOnToggle","onSubmit","preventDefault","trim","length","alert","newTodo","Date","getTime","autoComplete","placeholder","onChange","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"0LAoBeA,EAlBC,WAAwB,IAAvBC,EAAsB,uDAAP,GAAO,EAETC,mBAASD,GAFA,mBAE5BE,EAF4B,KAErBC,EAFqB,KAI7BC,EAAoB,SAACC,GACvBF,EAAS,2BACFD,GADC,kBAEHG,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,UAI7BC,EAAc,WAChBN,EAASH,IAGb,MAAO,CAACE,EAAOE,EAAmBK,I,OCavBC,EA7BU,SAACR,EAAOS,GAC7B,OAAQA,EAAOC,MACX,IAAK,MACD,MAAM,GAAN,mBAAWV,GAAX,CAAkBS,EAAOE,UAG7B,IAAK,SACD,OAAOX,EAAMY,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAOL,EAAOE,WAGrD,IAAK,SACD,OAAOX,EAAMe,KAAI,SAACF,GACd,OAAIA,EAAKC,KAAOL,EAAOE,QACZ,2BACAE,GADP,IAEIG,MAAOH,EAAKG,OAGTH,KAKnB,QACI,OAAOb,ICrBbiB,EAAO,WACT,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IA6GzCC,EA1GC,WAAO,IAAD,EAEQC,qBAAWf,EAAkB,GAAIS,GAFzC,mBAEXO,EAFW,KAEJC,EAFI,OAG8B5B,EAAQ,CACpDgB,KAAM,KAJQ,mBAGXb,EAHW,KAGJE,EAHI,KAGeK,EAHf,KAMVM,EAASb,EAATa,KAERa,qBAAU,WACNN,aAAaO,QAAQ,QAAST,KAAKU,UAAUJ,MAC9C,CAACA,IAIJ,IAkCMK,EAAiB,SAACf,GAOpBW,EALe,CACXf,KAAM,SACNC,QAASG,KAMjB,OACI,gCACI,yCACA,uBACA,uBAAMgB,SAhDO,SAAC3B,GAGlB,GAFAA,EAAE4B,iBAEElB,EAAKmB,OAAOC,OAAS,EACrB,OAAOC,MAAM,iBAGjB,IAAMC,EAAU,CACZrB,IAAI,IAAIsB,MAAOC,UACfxB,KAAMA,EACNG,MAAM,GAQVS,EALe,CACXf,KAAM,MACNC,QAASwB,IAIb5B,KA6BI,UACI,uBACIG,KAAK,OACLL,KAAK,OACLiC,aAAa,MACbhC,MAAOO,EACP0B,YAAY,iBACZC,SAAUtC,IAEd,wBAAQQ,KAAK,SAAb,wBAIJ,qBAAK+B,UAAU,eAAf,SACI,kCACI,gCACI,+BACI,wCACA,gDAGR,gCAEQjB,EAAMT,KAAI,SAACF,GACP,OACI,+BAEQA,EAAKG,KACC,oBAAI0B,QAAS,kBAAMb,EAAehB,EAAKC,KAAK2B,UAAU,YAAtD,uBACA,oBAAIC,QAAS,kBAAMb,EAAehB,EAAKC,KAAK2B,UAAU,YAAtD,uBAEV,6BAAK5B,EAAKA,OACV,oBAAI6B,QAAS,kBAzDzB5B,EAyD8CD,EAAKC,QAlDvEW,EALe,CACXf,KAAM,SACNC,QAASG,IAJM,IAACA,GAyDwD2B,UAAU,SAAtD,sBAPK5B,EAAKC,kB,MC1FlD6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.96ecaf24.chunk.js","sourcesContent":["import { useState } from \"react\"\r\n\r\nconst useForm = (initialState = '') => {\r\n\r\n    const [state, setState] = useState(initialState);\r\n\r\n    const handleInputChange = (e) => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name] : e.target.value\r\n        });\r\n    }\r\n\r\n    const handleReset = () => {\r\n        setState(initialState);\r\n    }\r\n\r\n    return [state, handleInputChange, handleReset];\r\n}\r\n\r\nexport default useForm;","\r\nconst ReducerComponent = (state, action) => {\r\n    switch (action.type) {\r\n        case 'add':\r\n            return [...state, action.payload];\r\n        break;\r\n\r\n        case 'delete': \r\n            return state.filter((todo) => todo.id !== action.payload);\r\n        break;\r\n\r\n        case 'toggle': \r\n            return state.map((todo) => {\r\n                if (todo.id === action.payload) {\r\n                    return {\r\n                        ...todo,\r\n                        done: !todo.done\r\n                    };\r\n                } else {\r\n                    return todo;\r\n                }\r\n            })\r\n        break;\r\n        \r\n        default:\r\n            return state;\r\n        break;\r\n    }\r\n}\r\n\r\nexport default ReducerComponent;","import React, { useEffect, useReducer } from 'react';\r\nimport useForm from '../hooks/useForm';\r\nimport ReducerComponent from './ReducerComponent';\r\n\r\nconst init = () => {\r\n    return JSON.parse(localStorage.getItem('todos')) || [];\r\n}\r\n\r\nconst TodoApp = () => {\r\n\r\n    const [todos, dispatch] = useReducer(ReducerComponent, [], init);\r\n    const [state, handleInputChange, handleReset] = useForm({\r\n        todo: ''\r\n    });\r\n    const { todo } = state;\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos));\r\n    }, [todos]);\r\n\r\n\r\n    // Agregar nuevo todo\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log(todo);\r\n        if (todo.trim().length < 1) {\r\n            return alert('Escribe algo!');\r\n        }\r\n\r\n        const newTodo = {\r\n            id: new Date().getTime(),\r\n            todo: todo,\r\n            done: false\r\n        }\r\n\r\n        const action = {\r\n            type: 'add',\r\n            payload: newTodo\r\n        }\r\n\r\n        dispatch(action);\r\n        handleReset();\r\n    }\r\n\r\n    // Borrar todo\r\n    const handleOnDelete = (id) => {\r\n        //console.log(id);\r\n        const action = {\r\n            type: 'delete',\r\n            payload: id\r\n        }\r\n\r\n        dispatch(action);\r\n    }\r\n\r\n    // Cambiar Estado\r\n    const handleOnToggle = (id) => {\r\n        //console.log(id);\r\n        const action = {\r\n            type: 'toggle',\r\n            payload: id\r\n        }\r\n\r\n        dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>TodoApp</h1>\r\n            <hr />\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type='text'\r\n                    name='todo'\r\n                    autoComplete='off'\r\n                    value={todo}\r\n                    placeholder='Escribe algo..'\r\n                    onChange={handleInputChange}\r\n                />\r\n                <button type='submit'>\r\n                    Agregar\r\n                </button>\r\n            </form>\r\n            <div className='table-center'>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Estado</th>\r\n                            <th>Acci√≥n</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            todos.map((todo) => {\r\n                                return (\r\n                                    <tr key={todo.id}>\r\n                                        {\r\n                                            todo.done\r\n                                                ? <td onClick={() => handleOnToggle(todo.id)} className='realizado'>Realizado</td>\r\n                                                : <td onClick={() => handleOnToggle(todo.id)} className='pendiente'>Pendiente</td>\r\n                                        }\r\n                                        <td>{todo.todo}</td>\r\n                                        <td onClick={() => handleOnDelete(todo.id)} className='borrar'>Borrar</td>\r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoApp from './components/TodoApp';\nimport './index.css';\n\nReactDOM.render(\n    <TodoApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}